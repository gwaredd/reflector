{{## def.attrs:p:{{ var keys = p.decl.attrs ? Object.keys( p.decl.attrs ) : null; }}{{? keys }}
    static Attr {{= p.name }}[ {{= keys.length }} ];
{{~ keys : key:ki }}
    {{= p.name }}[ {{= ki }} ].Key     = "{{= key }}";
    {{= p.name }}[ {{= ki }} ].Value   = "{{= p.decl.attrs[ key ] }}";
{{~}}
    {{? p.prefix }}{{= p.prefix }}.{{?}}Attrs       = {{= p.name }};
    {{? p.prefix }}{{= p.prefix }}.{{?}}NumAttrs    = {{= keys.length }};
{{?}}#}}{{## def.enum:{{? decl.constants && decl.constants.length }}
    static Constant e[ {{= decl.constants.length }} ];
{{~ decl.constants : e:ei }}
    e[ {{= ei }} ].Name     = "{{= e.name }}";
    e[ {{= ei }} ].Value    = {{= e.value }};
    {{# def.attrs:{ decl:e, name:"e" + ei + "_attrs", prefix:"e[" + ei + "]" } }}
{{~}}{{?}}
    // set constants

    Constants       = e;
    NumMembers      = {{= decl.constants.length }};#}}{{## def.inherits:
    static const TypeInfo* bases[] = { this{{~ decl.inherits : base }}, Type<{{= base.type }}>(){{~}}, nullptr };
    Inherits = bases;
#}}{{## def.fields:{{? decl.fields && decl.fields.length }}
    //
    // class fields
    //

    static Field p[ {{= decl.fields.length }} ];
{{~ decl.fields : f:fi }}
    // {{= fi}}. {{= f.name }}{{? f.from }} (inhertied from {{= f.from }}){{?}}

    p[ {{=fi}} ].Name     = "{{= f.name }}";
    p[ {{=fi}} ].Info     = {{? f.type != "this" }}Type< {{= f.type }} >(){{??}}this{{?}};{{? f.pointer }}
    p[ {{=fi}} ].IsPointer= true;{{?}}
    p[ {{=fi}} ].Get      = []( void* o ) -> void* { return &reinterpret_cast<{{= decl.name }}*>(o)->{{= f.name }}; };{{# def.itr }}
    {{# def.attrs:{ decl:f, name:"p" + fi + "_attrs", prefix:"p[" + fi + "]" } }}
{{~}}
    // set fields

    Fields          = p;
    NumMembers      = {{= decl.fields.length }};{{?}}#}}{{## def.itr:{{? f.iterator }}{{? f.iterator == "vector*" }}
    p[ {{=fi}} ].IsArray  = true;
    p[ {{=fi}} ].Iterator = []( void* o ) -> std::function< std::pair< void*,const TypeInfo* >() >
    {
        auto obj = reinterpret_cast<{{= decl.name }}*>(o);
        auto itr = std::begin( obj->{{= f.name }} );
        auto end = std::end( obj->{{= f.name }} );

        return [=]() mutable -> std::pair< void*,const TypeInfo* >
        {
            if( itr == end ) return std::make_pair( nullptr, nullptr );
            auto cur = *itr++;
            return std::make_pair( cur, cur->GetType() );
        };
    };{{??}}
#error unknown iterator type!{{?}}{{?}}#}}